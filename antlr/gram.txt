grammar gram;
SEMI : ';';
WHILE : 'while';
LP : [(];
RP : [)];
IF : 'if';
ELSE : 'else';
RETURN : 'return';
LBR : [{];
RBR : [}];
NUM : [0-9]+;
FPNUM : ([0-9]+'.'[0-9]*|'.'[0-9]+)([Ee][-+]?[0-9]+)?|'-'?[0-9]+[Ee][-+]?[0-9]+;
TYPE : 'int' | 'double' | 'string';
OR : 'or';
AND : 'and';
NOT : 'not';
RELOP : '>=' | '<=' | '>' | '<' | '!=' | '==';
PLUS : [+];
MULOP : [*/%];
MINUS : [-];
STRING : '[^"]*';
WHITESPACE : [ \r\n\t]+ -> skip;
COMMENT : '//' .*?'\n' -> skip;


program : braceblock;
stmts : stmt stmts | ;
stmt : cond | loop | return_stmt SEMI;
loop : WHILE LP expr RP braceblock;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
braceblock : LBR stmts RBR;
return_stmt : RETURN expr;
expr : orexp;
orexp : orexp OR andexp | andexp;
andexp : andexp AND notexp | notexp;
notexp : NOT notexp | rel;
rel : sum RELOP sum | sum;
sum : sum PLUS term | sum MINUS term | term;
term : term MULOP neg | neg;
neg : MINUS neg | typecast;
typecast : LP TYPE RP typecast| factor;
factor : NUM | FPNUM | STRING | LP expr RP;
lambda : ;